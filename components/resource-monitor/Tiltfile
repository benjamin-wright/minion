load('ext://restart_process', 'docker_build_with_restart')
load('../../tilt_shared/npm.Tiltfile', 'npm_init')
allow_k8s_contexts(['kind-local-dev', 'k3d-dev'])

# CRDs

local_resource(
    'crds',
    'helm delete crds || true && helm install crds ../../crds',
    deps=['./crds']
)

# Dummy Sidecar

custom_build(
    'version-sidecar',
    'docker pull docker.io/busybox && docker tag docker.io/busybox $EXPECTED_REF',
    ['.'],
    match_in_env_vars=True
)

# Resource Monitor

local_resource(
    'compile',
    'mkdir -p build && cd src && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ../build/resource-monitor',
    deps=['./src', '../../modules/crd-lib']
)

local_resource(
    'unit-tests',
    'cd src && go test ./... -timeout 10s',
    deps=['./src']
)

docker_build_with_restart(
    'resource-monitor',
    'build',
    entrypoint='/go/bin/go_binary',
    dockerfile='../go.Dockerfile',
    build_args={
        'BASE_IMAGE': 'alpine',
        'EXE_NAME': 'resource-monitor'
    },
    ignore=[
        'resource-monitor-go-tmp-umask'
    ],
    live_update=[
        sync('./build/resource-monitor', '/go/bin/go_binary')
    ]
)

# Integration tests

npm_init("integration")

docker_build(
    'int-tests',
    'integration',
    dockerfile='../jest.Dockerfile',
    network='host'
)

k8s_resource(
    'resource-monitor-int-tests',
    new_name='int-tests'
)

# Deployment

k8s_yaml(helm('chart', name='resource-monitor', namespace='default', set=[
    'image.name=resource-monitor',
    'environment.values.loggerLevel=info',
    'environment.values.sidecarImage=version-sidecar',
    'tests.enabled=true',
    'tests.image=int-tests'
]))